/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/scopes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new scope
         * @description Creates a new scope
         */
        post: operations["createScope"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scopes/{scope}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get scope details
         * @description Returns details of a scope
         */
        get: operations["getScope"];
        put?: never;
        post?: never;
        /**
         * Delete scope
         * @description Deletes a scope if the scope has no packages
         */
        delete: operations["deleteScope"];
        options?: never;
        head?: never;
        /**
         * Update scope
         * @description Updates the details of a scope
         */
        patch: operations["updateScope"];
        trace?: never;
    };
    "/scopes/{scope}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List scope members
         * @description Returns a list of members of a scope
         */
        get: operations["listScopeMembers"];
        put?: never;
        /**
         * Add scope member
         * @description Invites a user to a scope
         */
        post: operations["addScopeMember"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scopes/{scope}/members/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove scope member
         * @description Removes a member from a scope
         */
        delete: operations["removeScopeMember"];
        options?: never;
        head?: never;
        /**
         * Update scope member
         * @description Updates the roles of a scope member
         */
        patch: operations["updateScopeMember"];
        trace?: never;
    };
    "/scopes/{scope}/invites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List scope invites
         * @description Returns a list of invites to a scope
         */
        get: operations["listScopeInvites"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scopes/{scope}/invites/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete scope invite
         * @description Deletes an invite to a scope
         */
        delete: operations["deleteScopeInvite"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/packages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List packages
         * @description Returns a list of packages
         */
        get: operations["listPackages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scopes/{scope}/packages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List scope packages
         * @description Returns a list of packages in a scope
         */
        get: operations["listScopePackages"];
        put?: never;
        /**
         * Create a new package
         * @description Creates a new package in a scope
         */
        post: operations["createPackage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scopes/{scope}/packages/{package}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get package details
         * @description Returns details of a package
         */
        get: operations["getPackage"];
        put?: never;
        post?: never;
        /**
         * Delete package
         * @description Deletes a package if the package has no versions
         */
        delete: operations["deletePackage"];
        options?: never;
        head?: never;
        /**
         * Update package
         * @description Updates the details of a package
         */
        patch: operations["updatePackage"];
        trace?: never;
    };
    "/scopes/{scope}/packages/{package}/dependents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List package dependents
         * @description Returns a list of packages that depend on a package
         */
        get: operations["listPackageDependents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scopes/{scope}/packages/{package}/score": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get package score
         * @description Returns the package score details
         */
        get: operations["getPackageScore"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scopes/{scope}/packages/{package}/versions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List package versions
         * @description Returns a list of versions of a package
         */
        get: operations["listPackageVersions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scopes/{scope}/packages/{package}/versions/{version}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get package version details
         * @description Returns details of a package version
         */
        get: operations["getPackageVersion"];
        put?: never;
        /**
         * Create a new package version
         * @description Creates a new version of a package
         */
        post: operations["createPackageVersion"];
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update package version
         * @description Updates the details of a package version
         */
        patch: operations["updatePackageVersion"];
        trace?: never;
    };
    "/scopes/{scope}/packages/{package}/versions/{version}/dependencies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List the dependencies of a package version
         * @description Returns a list of dependencies of a package
         */
        get: operations["listDependencies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get authenticated user's details
         * @description Returns details of the authenticated user
         */
        get: operations["getSelfUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/scopes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List authenticated user's scopes
         * @description Returns a list of scopes that the authenticated user is a member of
         */
        get: operations["listSelfUserScopes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/member/{scope}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get authenticated user's scope member details
         * @description Returns details of the authenticated user's membership of a scope
         */
        get: operations["getSelfUserScopeMember"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/invites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List authenticated user's scope invites
         * @description Returns a list of invites to scopes that the authenticated user has received
         */
        get: operations["listSelfUserInvites"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/invites/{scope}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Accept scope invite
         * @description Accepts an invite to a scope
         */
        post: operations["acceptScopeInvite"];
        /**
         * Decline scope invite
         * @description Declines an invite to a scope
         */
        delete: operations["declineScopeInvite"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user details
         * @description Returns details of a user
         */
        get: operations["getUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/scopes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List user's scopes
         * @description Returns a list of scopes that a user is a member of
         */
        get: operations["listUserScopes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authorizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create authorization
         * @description Starts an authorization flow
         */
        post: operations["createAuthorization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authorizations/details/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get authorization details
         * @description Returns details of an authorization
         */
        get: operations["getAuthorizationDetails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authorizations/approve/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Approve authorization
         * @description Approves an authorization
         */
        post: operations["approveAuthorization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authorizations/deny/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deny authorization
         * @description Denies an authorization
         */
        post: operations["denyAuthorization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authorizations/exchange": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Exchange authorization code for access token
         * @description Exchanges an authorization code for an access token
         */
        post: operations["exchangeAuthorizationCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/publishing_tasks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get publishing task details
         * @description Returns details of a publishing task
         */
        get: operations["getPublishingTask"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get stats
         * @description Returns stats about the registry
         */
        get: operations["getStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @description The error code. */
            code: string;
            /** @description The error message. */
            message: string;
        };
        /**
         * @description The name of a scope. This must not be @ prefixed.
         * @example denoland
         */
        ScopeName: string;
        Scope: {
            scope: components["schemas"]["ScopeName"];
            creator?: components["schemas"]["User"];
            quotas?: {
                /**
                 * @description The number of packages in the scope.
                 * @example 3
                 */
                packageUsage?: number;
                /**
                 * @description The maximum number of packages allowed in the scope.
                 * @example 10
                 */
                packageLimit?: number;
                /**
                 * @description The number of new packages created in the scope in the last week.
                 * @example 1
                 */
                newPackagePerWeekUsage?: number;
                /**
                 * @description The maximum number of new packages allowed to be created in the scope in a week.
                 * @example 5
                 */
                newPackagePerWeekLimit?: number;
                /**
                 * @description The number of times packages in the scope have been published in the last week.
                 * @example 1
                 */
                publishAttemptsPerWeekUsage?: number;
                /**
                 * @description The maximum number of times packages in the scope can be published in a week.
                 * @example 5
                 */
                publishAttemptsPerWeekLimit?: number;
            };
            /** @description Whether to verify the actor of a GitHub Actions run when authenticating publishing with a GitHub Actions OIDC token. */
            ghActionsVerifyActor?: boolean;
            /** @description Whether to require publishing from a CI environment. This disables publishing from a local environment. */
            requirePublishingFromCI?: boolean;
            /**
             * Format: date-time
             * @description The date and time when the scope was created.
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description The date and time when the scope was last updated.
             */
            updatedAt: string;
        };
        CreateScopeRequest: {
            scope?: components["schemas"]["ScopeName"];
        };
        UpdateScopeRequest: {
            /** @description Whether to verify the actor of a GitHub Actions run when authenticating publishing with a GitHub Actions OIDC token. */
            ghActionsVerifyActor: boolean;
        } | {
            /** @description Whether to require publishing from a CI environment. This disables publishing from a local environment. */
            requirePublishingFromCI: boolean;
        };
        ScopeMember: {
            scope: components["schemas"]["ScopeName"];
            user: components["schemas"]["User"];
            /** @description Whether the user is an admin of the scope. */
            isAdmin: boolean;
            /**
             * Format: date-time
             * @description The date and time when the user was added to the scope.
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description The date and time when the scope member roles were last updated.
             */
            updatedAt: string;
        };
        ScopeInvite: {
            scope: components["schemas"]["ScopeName"];
            targetUser: components["schemas"]["User"] & unknown;
            inviter: components["schemas"]["User"] & unknown;
            /**
             * Format: date-time
             * @description The date and time when the invite was created.
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description The date and time when the invite was last updated.
             */
            updatedAt: string;
        };
        /**
         * Format: uuid
         * @description The ID of a user.
         */
        UserId: string;
        User: {
            id: components["schemas"]["UserId"];
            /**
             * @description The user's display name.
             * @example Ryan Dahl
             */
            name: string;
            /**
             * @description The user's email address.
             * @example ry@example.com
             */
            email?: string;
            /**
             * @description The URL to the user's avatar.
             * @example https://avatars.githubusercontent.com/u/80?v=4
             */
            avatarUrl: string;
            /**
             * @description The user's GitHub ID.
             * @example 80
             */
            githubId?: number;
            /** @description Whether the user is blocked from using the registry. */
            isBlocked?: boolean;
            /** @description Whether the user is a staff member. */
            isStaff?: boolean;
            /**
             * @description The number of scopes the user created.
             * @example 3
             */
            scopeUsage?: number;
            /**
             * @description The maximum number of scopes the user can create.
             * @example 10
             */
            scopeLimit?: number;
            /**
             * @description The number of invites pending for the user.
             * @example 3
             */
            inviteCount?: number;
            /**
             * Format: date-time
             * @description The date and time when the user profile was created.
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description The date and time when the user profile was last updated.
             */
            updatedAt: string;
        };
        AddScopeMemberRequest: {
            /**
             * @description The GitHub login of the user to add to the scope.
             * @example ry
             */
            githubLogin: string;
        };
        UpdateScopeMemberRequest: {
            /** @description Whether the user should be an admin of the scope. */
            isAdmin: boolean;
        };
        GitHubRepository: {
            /**
             * @description The GitHub user / organization of the repository.
             * @example denoland
             */
            owner?: string;
            /**
             * @description The GitHub repository name.
             * @example deno
             */
            name?: string;
        };
        /**
         * @description The name of a package.
         * @example fmt
         */
        PackageName: string;
        Package: {
            scope: components["schemas"]["ScopeName"];
            name: components["schemas"]["PackageName"];
            /**
             * @description The description of the package.
             * @example A module for formatting strings.
             */
            description: string;
            runtimeCompat?: components["schemas"]["RuntimeCompat"];
            /**
             * Format: date-time
             * @description The date and time when the package was created.
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description The date and time when the package was last updated.
             */
            updatedAt: string;
            githubRepository?: components["schemas"]["GitHubRepository"];
            score?: number;
        };
        CreatePackageRequest: {
            package: components["schemas"]["PackageName"];
        };
        UpdatePackageRequest: {
            /** @description The description of the package. */
            description: string;
        } | {
            githubRepository: {
                /**
                 * @description The GitHub user / organization of the repository.
                 * @example denoland
                 */
                owner: string;
                /**
                 * @description The GitHub repository name.
                 * @example deno
                 */
                repo: string;
            } | null;
        } | {
            runtimeCompat: components["schemas"]["RuntimeCompat"];
        } | {
            /** @description Whether this package should be archived or not. */
            isArchived: boolean;
        };
        RuntimeCompat: {
            /** @description Whether the package is compatible with web browsers. */
            browser?: boolean | null;
            /** @description Whether the package is compatible with Deno. */
            deno?: boolean | null;
            /** @description Whether the package is compatible with Node.js. */
            node?: boolean | null;
            /** @description Whether the package is compatible with workerd. */
            workerd?: boolean | null;
            /** @description Whether the package is compatible with Bun. */
            bun?: boolean | null;
        };
        /**
         * @description A semantic version.
         * @example 1.2.3
         */
        Version: string;
        Dependent: {
            scope: components["schemas"]["ScopeName"];
            name: components["schemas"]["PackageName"];
            versions?: components["schemas"]["Version"][];
            /** @description The total number of versions of the package. */
            totalVersions: number;
        };
        PackageVersion: {
            scope: components["schemas"]["ScopeName"];
            package?: components["schemas"]["PackageName"];
            version: components["schemas"]["Version"];
            /** @description Whether the version has been yanked. */
            yanked: boolean;
            /**
             * Format: date-time
             * @description The date and time when the package version was created.
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description The date and time when the package version was last updated.
             */
            updatedAt: string;
            /** @description Rekor log ID for the published package version. */
            rekorLogId?: string;
        };
        UpdatePackageVersionRequest: {
            /** @description Whether the version is yanked or not. */
            yanked: boolean;
        };
        PublishingTask: {
            /**
             * Format: uuid
             * @description The ID of the publishing task.
             */
            id: string;
            /**
             * @description The status of the publishing task.
             * @enum {string}
             */
            status: "pending" | "processing" | "processed" | "success" | "failure";
            error: {
                /** @description The error code. */
                code?: string;
                /** @description The error message. */
                message?: string;
            } | null;
            userId: components["schemas"]["UserId"] & null;
            packageScope: components["schemas"]["ScopeName"];
            packageName: components["schemas"]["PackageName"];
            packageVersion: components["schemas"]["Version"];
            /**
             * Format: date-time
             * @description The date and time when the publishing task was created.
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description The date and time when the publishing task was last updated.
             */
            updatedAt: string;
        };
        Dependency: {
            /**
             * @description The kind of dependency.
             * @enum {string}
             */
            kind: "jsr" | "npm";
            /**
             * @description The fully qualified name of the dependency.
             * @example @std/fs
             */
            name: string;
            /**
             * @description The semver constraint of the dependency.
             * @example ^0.50.0
             */
            constraint: string;
            /**
             * @description The path being imported from the dependency. This may be the empty string if the "default entrypoint" is being imported.
             * @example /exists
             */
            path: string;
        };
        Authorization: {
            /** @description The authorization code. */
            code: string;
            /** @description The permissions that the token will have. */
            permissions: components["schemas"]["Permission"][];
            /**
             * Format: date-time
             * @description The date and time until which the authorization can be approved / exchanged.
             */
            expiresAt: string;
        };
        Permission: {
            /**
             * @description The permission name.
             * @enum {string}
             */
            permission: "package/publish";
            scope: components["schemas"]["ScopeName"];
        } | {
            /**
             * @description The permission name.
             * @enum {string}
             */
            permission: "package/publish";
            scope: components["schemas"]["ScopeName"];
            package: components["schemas"]["PackageName"];
        } | {
            /**
             * @description The permission name.
             * @enum {string}
             */
            permission: "package/publish";
            scope: components["schemas"]["ScopeName"];
            package: components["schemas"]["PackageName"];
            version: components["schemas"]["Version"];
            /** @description The SHA256 hash of the tarball. */
            tarballHash: string;
        };
        CreateAuthorizationRequest: {
            /**
             * @description The challenge that will later be needed to retrieve the token after authorization.
             * @example 1234567890abcdef
             */
            challenge: string;
            /** @description The permissions that the token will have. */
            permissions?: components["schemas"]["Permission"][];
        };
        CreateAuthorizationResponse: {
            /** @description The URL that the user should visit to approve the authorization. */
            verificationUrl?: string;
            /** @description The authorization code that the user can manually enter if they can not directly visit the link. */
            code: string;
            /** @description The token that can be used to exchange for a device token after the authorization has been approved. */
            exchangeToken: string;
            /** @description The number of seconds that should be waited between polling the status of the authorization. */
            pollInterval: number;
            /**
             * Format: date-time
             * @description The date and time until which the authorization can be approved / exchanged.
             */
            expiresAt: string;
        };
        AuthorizationExchangeRequest: {
            /** @description The token that can be used to exchange for a device token after the authorization has been approved. */
            exchangeToken: string;
            /** @description The verifier that was used to generate the challenge. */
            verifier: string;
        };
        AuthorizationExchangeResponse: {
            /** @description The device token that can be used to authenticate requests. */
            token: string;
            user: components["schemas"]["User"] & unknown;
        };
        Stats: {
            /** @description The newest packages. */
            newest: components["schemas"]["Package"][];
            /** @description The recently uploaded package versions. */
            updated: components["schemas"]["PackageVersion"][];
            /** @description The featured packages */
            featured: components["schemas"]["Package"][];
        };
        PackageScore: {
            hasReadme: boolean;
            hasReadmeExamples: boolean;
            allEntrypointsDocs: boolean;
            percentageDocumentedSymbols: number;
            allFastCheck: boolean;
            hasProvenance: boolean;
            hasDescription: boolean;
            atLeastOneRuntimeCompatible: boolean;
            multipleRuntimesCompatible: boolean;
            total?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    createScope: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Scope properties */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateScopeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Scope"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getScope: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Scope"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Scope not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteScope: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK, no content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request / Scope has packages */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description User is not scope admin */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Scope not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateScope: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
            };
            cookie?: never;
        };
        /** @description Scope properties */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateScopeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Scope"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description User is not scope admin */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Scope not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listScopeMembers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScopeMember"][];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Scope not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    addScopeMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
            };
            cookie?: never;
        };
        /** @description Scope member properties */
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddScopeMemberRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScopeInvite"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description User is not scope admin */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Scope not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    removeScopeMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
                /** @description The ID of the user */
                userId: components["schemas"]["UserId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK, no content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request / Can not remove last scope admin */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description User is not a scope admin */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Scope or scope member not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateScopeMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
                /** @description The ID of the user */
                userId: components["schemas"]["UserId"];
            };
            cookie?: never;
        };
        /** @description Scope member properties */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateScopeMemberRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScopeMember"];
                };
            };
            /** @description Invalid request / Can not remove last scope admin */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description User is not a scope admin */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Scope or scope member not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listScopeInvites: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScopeInvite"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description User is not a scope admin */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Scope not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteScopeInvite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
                /** @description The ID of the user */
                userId: components["schemas"]["UserId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK, no content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description User is not a scope admin */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Scope or scope invite not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listPackages: {
        parameters: {
            query?: {
                /** @description The maximum number of packages to return */
                limit?: number;
                /** @description The page number of packages to return */
                page?: number;
                /** @description The search query */
                query?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["Package"][];
                        total?: number;
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listScopePackages: {
        parameters: {
            query?: {
                /** @description The maximum number of packages to return */
                limit?: number;
                /** @description The page number of packages to return */
                page?: number;
            };
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["Package"][];
                        total?: number;
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Scope not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createPackage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
            };
            cookie?: never;
        };
        /** @description Package properties */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePackageRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Package"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description User is not a scope member */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Scope not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getPackage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
                /** @description The name of the package */
                package: components["schemas"]["PackageName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Package"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Package not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deletePackage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
                /** @description The name of the package */
                package: components["schemas"]["PackageName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK, no content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request / Package has versions */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description User is not a scope admin */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Package not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updatePackage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
                /** @description The name of the package */
                package: components["schemas"]["PackageName"];
            };
            cookie?: never;
        };
        /** @description Package properties */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePackageRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Package"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description User is not a scope member / User is not a scope admin */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Package not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listPackageDependents: {
        parameters: {
            query?: {
                /** @description The maximum number of dependents to return */
                limit?: number;
                /** @description The page number of dependents to return */
                page?: number;
                /** @description The maximum number of versions per package to return */
                versions_per_package_limit?: number;
            };
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
                /** @description The name of the package */
                package: components["schemas"]["PackageName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["Dependent"][];
                        total?: number;
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Package not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getPackageScore: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
                /** @description The name of the package */
                package: components["schemas"]["PackageName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackageScore"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Package not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listPackageVersions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
                /** @description The name of the package */
                package: components["schemas"]["PackageName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackageVersion"][];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Package not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getPackageVersion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
                /** @description The name of the package */
                package: components["schemas"]["PackageName"];
                /** @description The version of the package */
                version: components["schemas"]["Version"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackageVersion"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Package version not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createPackageVersion: {
        parameters: {
            query: {
                /** @description The path to the config file */
                config: string;
            };
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
                /** @description The name of the package */
                package: components["schemas"]["PackageName"];
                /** @description The version of the package */
                version: components["schemas"]["Version"];
            };
            cookie?: never;
        };
        /** @description A gzipped tarball containing all files in the package version */
        requestBody: {
            content: {
                "application/octet-stream": unknown;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublishingTask"];
                };
            };
            /** @description Invalid request / Package version already exists */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized / User is not a scope member */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description User is not a scope member */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Package not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updatePackageVersion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
                /** @description The name of the package */
                package: components["schemas"]["PackageName"];
                /** @description The version of the package */
                version: components["schemas"]["Version"];
            };
            cookie?: never;
        };
        /** @description Package version properties */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePackageVersionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackageVersion"];
                };
            };
            /** @description Invalid request / Package version already exists */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized / User is not a scope member */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description User is not a scope member */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Package not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listDependencies: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
                /** @description The name of the package */
                package: components["schemas"]["PackageName"];
                /** @description The version of the package */
                version: components["schemas"]["Version"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Dependency"][];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Package not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getSelfUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listSelfUserScopes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Scope"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getSelfUserScopeMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the scope */
                scope: components["schemas"]["ScopeName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScopeMember"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listSelfUserInvites: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScopeInvite"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    acceptScopeInvite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the scope to accept the invite for */
                scope: components["schemas"]["ScopeName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScopeMember"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Scope invite not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    declineScopeInvite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the scope to decline the invite for */
                scope: components["schemas"]["ScopeName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK, no content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Scope invite not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the user */
                id: components["schemas"]["UserId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listUserScopes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the user */
                id: components["schemas"]["UserId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Scope"][];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createAuthorization: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Authorization properties */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAuthorizationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateAuthorizationResponse"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getAuthorizationDetails: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The code of the authorization */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Authorization"];
                };
            };
            /** @description Authorization not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    approveAuthorization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The code of the authorization */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK, no content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Authorization not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    denyAuthorization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The code of the authorization */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK, no content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Authorization not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    exchangeAuthorizationCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthorizationExchangeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthorizationExchangeResponse"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getPublishingTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the publishing task */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublishingTask"];
                };
            };
            /** @description Publishing task not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Stats"];
                };
            };
        };
    };
}
